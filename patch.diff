diff --git a/app.py b/app.py
index d1fdd5c..15c1bc8 100644
--- a/app.py
+++ b/app.py
@@ -1,9 +1,27 @@
 from flask import Flask, request, jsonify, send_from_directory, abort
 from flask_cors import CORS
+from flask_sqlalchemy import SQLAlchemy  # type: ignore
 
+# Inicializa Flask y configura la base de datos
 app = Flask(__name__, static_folder='frontend/build')
+app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///citas.db'  # Configuración para usar SQLite
+app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Deshabilita el seguimiento de modificaciones
 CORS(app)  # Esto habilita CORS para que las solicitudes entre el frontend y el backend no tengan problemas de dominio cruzado
 
+# Inicializa SQLAlchemy
+db = SQLAlchemy(app)
+
+# Modelo para las citas
+class Cita(db.Model):
+    id = db.Column(db.Integer, primary_key=True)
+    name = db.Column(db.String(100), nullable=False)
+    date = db.Column(db.String(20), nullable=False)
+    hour = db.Column(db.String(5), nullable=False)
+    reason = db.Column(db.String(200))
+
+    def __repr__(self):
+        return f"<Cita {self.name}, {self.date}, {self.hour}>"
+
 # Ruta para servir los archivos estáticos (frontend)
 @app.route('/')
 def serve():
@@ -20,26 +38,42 @@ def download_file(filename):
         abort(404, description="Upload folder not configured")
     return send_from_directory(upload_folder, filename, as_attachment=True)
 
-# Ruta para manejar la creación de citas (API)
-@app.route('/api/citas', methods=['POST'])
-def agendar_cita():
-    try:
-        data = request.get_json()  # Recoge los datos enviados desde el frontend
-        print("Datos recibidos:", data)  # Esto se imprimirá en la consola del backend
-        
-        name = data.get('name')
-        date = data.get('date')
-        hour = data.get('hour')
-        reason = data.get('reason')
-
-        # Aquí puedes agregar validaciones para asegurarte de que los datos no sean nulos
-        if not all([name, date, hour]):
-            return jsonify({"error": "Faltan datos requeridos"}), 400
-
-        # Aquí, podrías agregar lógica para guardar la cita en una base de datos, si es necesario.
-        return jsonify({"message": "Cita agendada correctamente", "data": data}), 201
-    except Exception as e:
-        return jsonify({"error": str(e)}), 500
+# Ruta para manejar la creación de citas (API) - Soporte tanto para GET como POST
+@app.route('/api/citas', methods=['GET', 'POST'])  # type: ignore
+def manejar_citas():
+    if request.method == 'POST':
+        try:
+            data = request.get_json()  # Recoge los datos enviados desde el frontend
+            print("Datos recibidos:", data)  # Esto se imprimirá en la consola del backend
+
+            name = data.get('name')
+            date = data.get('date')
+            hour = data.get('hour')
+            reason = data.get('reason')
+
+            # Validar los datos
+            if not all([name, date, hour]):
+                return jsonify({"error": "Faltan datos requeridos"}), 400
+
+            # Crear una nueva cita en la base de datos
+            new_cita = Cita(name=name, date=date, hour=hour, reason=reason)
+            db.session.add(new_cita)
+            db.session.commit()
+
+            return jsonify({"message": "Cita agendada correctamente", "data": data}), 201
+        except Exception as e:
+            return jsonify({"error": str(e)}), 500
+    elif request.method == 'GET':
+        # Obtener todas las citas desde la base de datos
+        citas = Cita.query.all()
+        citas_data = [{"name": cita.name, "date": cita.date, "hour": cita.hour, "reason": cita.reason} for cita in citas]
+        return jsonify(citas_data), 200
+
+# Inicia la base de datos con el contexto de aplicación
+@app.before_first_request  # Esto se debe seguir usando si la versión de Flask lo soporta
+def create_tables():
+    with app.app_context():
+        db.create_all()
 
 # Inicia el servidor de Flask
 if __name__ == '__main__':
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index 5b2c2dd..900b04c 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -8,7 +8,24 @@ const CitaForm = () => {
 
   const handleSubmit = (e) => {
     e.preventDefault();
-    // Aquí puedes manejar el envío del formulario
+
+    const citaData = { name, date, hour, reason };
+
+    fetch('http://localhost:5000/api/citas', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+      },
+      body: JSON.stringify(citaData),
+    })
+      .then((response) => response.json())
+      .then((data) => {
+        console.log('Cita agendada:', data);
+        // Aquí puedes mostrar un mensaje de éxito o redirigir a otro lugar
+      })
+      .catch((error) => {
+        console.error('Error al crear cita:', error);
+      });
   };
 
   return (
